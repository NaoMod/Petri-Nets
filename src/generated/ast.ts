/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export interface Edge extends AstNode {
    readonly $container: Transition;
    readonly $type: 'Edge';
    place: Reference<Place>
    weight: number
}

export const Edge = 'Edge';

export function isEdge(item: unknown): item is Edge {
    return reflection.isInstance(item, Edge);
}

export interface PetriNet extends AstNode {
    readonly $type: 'PetriNet';
    name: string
    places: Array<Place>
    transitions: Array<Transition>
}

export const PetriNet = 'PetriNet';

export function isPetriNet(item: unknown): item is PetriNet {
    return reflection.isInstance(item, PetriNet);
}

export interface Place extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'Place';
    initialTokenNumber: number
    maxCapacity: number
    name: string
}

export const Place = 'Place';

export function isPlace(item: unknown): item is Place {
    return reflection.isInstance(item, Place);
}

export interface Transition extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'Transition';
    destinations: Array<Edge>
    name: string
    sources: Array<Edge>
}

export const Transition = 'Transition';

export function isTransition(item: unknown): item is Transition {
    return reflection.isInstance(item, Transition);
}

export interface PetriNetAstType {
    Edge: Edge
    PetriNet: PetriNet
    Place: Place
    Transition: Transition
}

export class PetriNetAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Edge', 'PetriNet', 'Place', 'Transition'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Edge:place': {
                return Place;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'PetriNet': {
                return {
                    name: 'PetriNet',
                    mandatory: [
                        { name: 'places', type: 'array' },
                        { name: 'transitions', type: 'array' }
                    ]
                };
            }
            case 'Transition': {
                return {
                    name: 'Transition',
                    mandatory: [
                        { name: 'destinations', type: 'array' },
                        { name: 'sources', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new PetriNetAstReflection();
