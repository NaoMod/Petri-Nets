/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export type Arc = ArcPtT | ArcTtP;

export const Arc = 'Arc';

export function isArc(item: unknown): item is Arc {
    return reflection.isInstance(item, Arc);
}

export interface ArcPtT extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'ArcPtT';
    name: string
    source: Reference<Place>
    target: Reference<Transition>
    weight: number
}

export const ArcPtT = 'ArcPtT';

export function isArcPtT(item: unknown): item is ArcPtT {
    return reflection.isInstance(item, ArcPtT);
}

export interface ArcTtP extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'ArcTtP';
    name: string
    source: Reference<Transition>
    target: Reference<Place>
    weight: number
}

export const ArcTtP = 'ArcTtP';

export function isArcTtP(item: unknown): item is ArcTtP {
    return reflection.isInstance(item, ArcTtP);
}

export interface PetriNet extends AstNode {
    readonly $type: 'PetriNet';
    arcs: Array<Arc>
    name: string
    places: Array<Place>
    transitions: Array<Transition>
}

export const PetriNet = 'PetriNet';

export function isPetriNet(item: unknown): item is PetriNet {
    return reflection.isInstance(item, PetriNet);
}

export interface Place extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'Place';
    initialTokenNumber: number
    maxCapacity: number
    name: string
}

export const Place = 'Place';

export function isPlace(item: unknown): item is Place {
    return reflection.isInstance(item, Place);
}

export interface Transition extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'Transition';
    name: string
}

export const Transition = 'Transition';

export function isTransition(item: unknown): item is Transition {
    return reflection.isInstance(item, Transition);
}

export interface PetriNetAstType {
    Arc: Arc
    ArcPtT: ArcPtT
    ArcTtP: ArcTtP
    PetriNet: PetriNet
    Place: Place
    Transition: Transition
}

export class PetriNetAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Arc', 'ArcPtT', 'ArcTtP', 'PetriNet', 'Place', 'Transition'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case ArcPtT:
            case ArcTtP: {
                return this.isSubtype(Arc, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'ArcPtT:source':
            case 'ArcTtP:target': {
                return Place;
            }
            case 'ArcPtT:target':
            case 'ArcTtP:source': {
                return Transition;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'PetriNet': {
                return {
                    name: 'PetriNet',
                    mandatory: [
                        { name: 'arcs', type: 'array' },
                        { name: 'places', type: 'array' },
                        { name: 'transitions', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new PetriNetAstReflection();
