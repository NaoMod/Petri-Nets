/******************************************************************************
 * This file was generated by langium-cli 1.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export type Arc = ArcPtT | ArcTtP;

export const Arc = 'Arc';

export function isArc(item: unknown): item is Arc {
    return reflection.isInstance(item, Arc);
}

export type Event = Reset | Show | Trigger | Undo;

export const Event = 'Event';

export function isEvent(item: unknown): item is Event {
    return reflection.isInstance(item, Event);
}

export interface ArcPtT extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'ArcPtT';
    name: string
    source: Reference<Place>
    target: Reference<Transition>
    weight: number
}

export const ArcPtT = 'ArcPtT';

export function isArcPtT(item: unknown): item is ArcPtT {
    return reflection.isInstance(item, ArcPtT);
}

export interface ArcTtP extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'ArcTtP';
    name: string
    source: Reference<Transition>
    target: Reference<Place>
    weight: number
}

export const ArcTtP = 'ArcTtP';

export function isArcTtP(item: unknown): item is ArcTtP {
    return reflection.isInstance(item, ArcTtP);
}

export interface PetriNet extends AstNode {
    readonly $type: 'PetriNet';
    arcs: Array<Arc>
    events: Array<Event>
    name: string
    places: Array<Place>
    transitions: Array<Transition>
}

export const PetriNet = 'PetriNet';

export function isPetriNet(item: unknown): item is PetriNet {
    return reflection.isInstance(item, PetriNet);
}

export interface Position extends AstNode {
    readonly $container: Token;
    readonly $type: 'Position';
    pos: Reference<Place> | Reference<Transition>
}

export const Position = 'Position';

export function isPosition(item: unknown): item is Position {
    return reflection.isInstance(item, Position);
}

export interface Reset extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'Reset';
    petrinet: Reference<PetriNet>
}

export const Reset = 'Reset';

export function isReset(item: unknown): item is Reset {
    return reflection.isInstance(item, Reset);
}

export interface Show extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'Show';
    place: Reference<Place>
}

export const Show = 'Show';

export function isShow(item: unknown): item is Show {
    return reflection.isInstance(item, Show);
}

export interface Token extends AstNode {
    readonly $container: TolkenHolder;
    readonly $type: 'Token';
    name: string
    position: Position
}

export const Token = 'Token';

export function isToken(item: unknown): item is Token {
    return reflection.isInstance(item, Token);
}

export interface TolkenHolder extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'Place' | 'TolkenHolder' | 'Transition';
    allTokens: Array<Reference<Token>> | Token
}

export const TolkenHolder = 'TolkenHolder';

export function isTolkenHolder(item: unknown): item is TolkenHolder {
    return reflection.isInstance(item, TolkenHolder);
}

export interface Trigger extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'Trigger';
    transition: Reference<Transition>
}

export const Trigger = 'Trigger';

export function isTrigger(item: unknown): item is Trigger {
    return reflection.isInstance(item, Trigger);
}

export interface Undo extends AstNode {
    readonly $container: PetriNet;
    readonly $type: 'Undo';
    petrinet: Reference<PetriNet>
}

export const Undo = 'Undo';

export function isUndo(item: unknown): item is Undo {
    return reflection.isInstance(item, Undo);
}

export interface Place extends TolkenHolder {
    readonly $container: PetriNet;
    readonly $type: 'Place';
    currentTokenNumber: number
    maxCapacity: number
    name: string
}

export const Place = 'Place';

export function isPlace(item: unknown): item is Place {
    return reflection.isInstance(item, Place);
}

export interface Transition extends TolkenHolder {
    readonly $container: PetriNet;
    readonly $type: 'Transition';
    name: string
}

export const Transition = 'Transition';

export function isTransition(item: unknown): item is Transition {
    return reflection.isInstance(item, Transition);
}

export interface PetriNetAstType {
    Arc: Arc
    ArcPtT: ArcPtT
    ArcTtP: ArcTtP
    Event: Event
    PetriNet: PetriNet
    Place: Place
    Position: Position
    Reset: Reset
    Show: Show
    Token: Token
    TolkenHolder: TolkenHolder
    Transition: Transition
    Trigger: Trigger
    Undo: Undo
}

export class PetriNetAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Arc', 'ArcPtT', 'ArcTtP', 'Event', 'PetriNet', 'Place', 'Position', 'Reset', 'Show', 'Token', 'TolkenHolder', 'Transition', 'Trigger', 'Undo'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case ArcPtT:
            case ArcTtP: {
                return this.isSubtype(Arc, supertype);
            }
            case Place:
            case Transition: {
                return this.isSubtype(TolkenHolder, supertype);
            }
            case Reset:
            case Show:
            case Trigger:
            case Undo: {
                return this.isSubtype(Event, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'ArcPtT:source':
            case 'ArcTtP:target':
            case 'Position:pos':
            case 'Show:place': {
                return Place;
            }
            case 'ArcPtT:target':
            case 'ArcTtP:source':
            case 'Position:pos':
            case 'Trigger:transition': {
                return Transition;
            }
            case 'Place:allTokens':
            case 'TolkenHolder:allTokens':
            case 'Transition:allTokens': {
                return Token;
            }
            case 'Reset:petrinet':
            case 'Undo:petrinet': {
                return PetriNet;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'PetriNet': {
                return {
                    name: 'PetriNet',
                    mandatory: [
                        { name: 'arcs', type: 'array' },
                        { name: 'events', type: 'array' },
                        { name: 'places', type: 'array' },
                        { name: 'transitions', type: 'array' }
                    ]
                };
            }
            case 'TolkenHolder': {
                return {
                    name: 'TolkenHolder',
                    mandatory: [
                        { name: 'allTokens', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new PetriNetAstReflection();
